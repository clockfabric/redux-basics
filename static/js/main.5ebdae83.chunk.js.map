{"version":3,"sources":["actions/index.js","App.js","serviceWorker.js","reducers/counter.js","reducers/isLogged.js","reducers/index.js","index.js"],"names":["increment","num","type","payload","decrement","App","counter","useSelector","state","isLogged","dispatch","useDispatch","react_default","a","createElement","className","onClick","Boolean","window","location","hostname","match","counterReducer","arguments","length","undefined","action","loggedReducer","allReducers","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4MAAaA,EAAY,SAAAC,GACxB,MAAO,CACNC,KAAM,YACNC,QAASF,IAIEG,EAAY,WACxB,MAAO,CACNF,KAAM,cCUOG,MAff,WACC,IAAMC,EAAUC,YAAY,SAAAC,GAAK,OAAIA,EAAMF,UACrCG,EAAWF,YAAY,SAAAC,GAAK,OAAIA,EAAMC,WACtCC,EAAWC,cAEjB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,sBAAcR,GACdM,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAMN,EAASV,EAAU,MAA1C,KACAY,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAMN,EAASN,OAAhC,KACCK,EAAWG,EAAAC,EAAAC,cAAA,iDAA+C,KCF1CG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECPSC,EAXQ,WAAuB,IAAtBd,EAAsBe,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAd,EAAGG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC7C,OAAQC,EAAOxB,MACd,IAAK,YACJ,OAAOM,EAAQkB,EAAOvB,QACvB,IAAK,YACJ,OAAOK,EAAQ,EAChB,QACC,OAAOA,ICEKmB,EATO,WAA2B,IAA1BnB,EAA0Be,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAChD,QADgDA,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GACjCvB,MACd,IAAK,UACJ,OAAQM,EACT,QACC,OAAOA,ICIKoB,EALKC,YAAgB,CACnCvB,QAASgB,EACTb,SAAUkB,ICWLG,EAAQC,YACbH,EACAV,OAAOc,8BAAgCd,OAAOc,gCAG/CC,IAASC,OACRtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAUL,MAAOA,GAChBlB,EAAAC,EAAAC,cAACsB,EAAD,OAEDC,SAASC,eAAe,SJuGnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5ebdae83.chunk.js","sourcesContent":["export const increment = num => {\r\n\treturn {\r\n\t\ttype: \"INCREMENT\",\r\n\t\tpayload: num\r\n\t};\r\n};\r\n\r\nexport const decrement = () => {\r\n\treturn {\r\n\t\ttype: \"DECREMENT\"\r\n\t};\r\n};\r\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { increment, decrement } from \"./actions\";\n\nfunction App() {\n\tconst counter = useSelector(state => state.counter);\n\tconst isLogged = useSelector(state => state.isLogged);\n\tconst dispatch = useDispatch();\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<h1>Counter: {counter}</h1>\n\t\t\t<button onClick={() => dispatch(increment(5))}>+</button>\n\t\t\t<button onClick={() => dispatch(decrement())}>-</button>\n\t\t\t{isLogged ? <h3>Valuable Information I should't see</h3> : \"\"}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const counterReducer = (state = 0, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase \"INCREMENT\":\r\n\t\t\treturn state + action.payload;\r\n\t\tcase \"DECREMENT\":\r\n\t\t\treturn state - 1;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default counterReducer;\r\n","const loggedReducer = (state = false, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase \"SIGN_IN\":\r\n\t\t\treturn !state;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default loggedReducer;\r\n","import counterReducer from \"./counter\";\r\nimport loggedReducer from \"./isLogged\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst allReducers = combineReducers({\r\n\tcounter: counterReducer,\r\n\tisLogged: loggedReducer\r\n});\r\n\r\nexport default allReducers;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport allReducers from \"./reducers\";\nimport { Provider } from \"react-redux\";\n\n// STORE -> Globalized state\n\n// ACTION -> functions to modify items in the store\n\n// REDUCER -> Filter that decides what action to execute\n\n// DISPATCH -> Take action\n\nconst store = createStore(\n\tallReducers,\n\twindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}